// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`withResponsiveProps errors throws an error when an breakpoints are neither present in theme or prop 1`] = `"Breakpoints need to be provided either through the propÂ \`breakpoints\`, or be present under the theme namesapce \`responsiveProps.breakpoints\` in a \`theme\` of a ThemeProvider: https://www.npmjs.com/package/responsive-props#register-breakpoints"`;

exports[`withResponsiveProps errors throws an error when an invalid breakpoint is passed 1`] = `"Invalid breakpoint 'test', choose one of the defined breakpoints: xs, s, m, l, xl"`;

exports[`withResponsiveProps forwardRef returns the underlaying DOM element of the wrapped styled-comoonent via \`ref\` 1`] = `
<div
  class="sc-bdVaJa juxaEn"
/>
`;

exports[`withResponsiveProps methods filterMixinsFromProps removes mixins properties from the props object 1`] = `
Object {
  "breakpoints": Object {
    "large": 300,
    "medium": 200,
    "small": 100,
  },
  "forwardRef": null,
  "mixins": Object {
    "mixins": Object {
      "testMethodOne": [MockFunction],
      "testMethodTwo": [MockFunction],
    },
  },
  "testPropOne": "Test one",
  "testPropTwo": "Test two",
  "theme": Object {
    "responsiveProps": Object {
      "breakpoints": Object {
        "l": 992,
        "m": 768,
        "s": 576,
        "xl": 1200,
        "xs": 320,
      },
    },
  },
  "wrappedComponent": Object {
    "$$typeof": Symbol(react.forward_ref),
    "attrs": Array [],
    "componentStyle": ComponentStyle {
      "componentId": "sc-bdVaJa",
      "isStatic": false,
      "lastClassName": "gKDBnu",
      "rules": Array [
        "
  background: red;
  width: 100px;
  ",
        [Function],
        "
",
      ],
    },
    "displayName": "styled.div",
    "foldedComponentIds": Array [],
    "render": [Function],
    "styledComponentId": "sc-bdVaJa",
    "target": "div",
    "toString": [Function],
    "warnTooManyClasses": [Function],
    "withComponent": [Function],
  },
}
`;

exports[`withResponsiveProps methods groupMixinsByBreakpoint Adds mixins under the namespace \`noBreakpoint\` if the props is not an object 1`] = `
Object {
  "noBreakpoint": Object {
    "testMethodTwo": 30,
  },
  "s": Object {
    "testMethodOne": 30,
  },
  "xl": Object {
    "testMethodOne": 1,
  },
  "xs": Object {
    "testMethodOne": 10,
  },
}
`;

exports[`withResponsiveProps methods groupMixinsByBreakpoint Returns an empty object early, if prop value is nulll or undefined 1`] = `Object {}`;

exports[`withResponsiveProps methods groupMixinsByBreakpoint retruns a map of mixins groupbed by it's breakpoint 1`] = `
Object {
  "l": Object {
    "testMethodOne": 10,
  },
  "s": Object {
    "testMethodOne": 10,
    "testMethodTwo": 30,
  },
  "xl": Object {
    "testMethodTwo": 1,
  },
  "xs": Object {
    "testMethodTwo": 10,
  },
}
`;

exports[`withResponsiveProps methods invokeBreakpointMixins invokes it's mixin methods 1`] = `
Array [
  Array [
    "green",
  ],
  Array [
    "blue",
  ],
  Array [
    "red",
  ],
]
`;

exports[`withResponsiveProps methods invokeBreakpointMixins renders as expected 1`] = `
<[object Object]
  bgMixin={
    Object {
      "s": "blue",
      "xl": "red",
      "xs": "green",
    }
  }
  breakpoints={
    Object {
      "l": 992,
      "m": 768,
      "s": 576,
      "xl": 1200,
      "xs": 320,
    }
  }
  margingMixin={10}
  paddingMixin={
    Object {
      "xl": Array [
        5,
        15,
      ],
    }
  }
>
  <[object Object]
    bgMixin={
      Object {
        "s": "blue",
        "xl": "red",
        "xs": "green",
      }
    }
    breakpoints={
      Object {
        "l": 992,
        "m": 768,
        "s": 576,
        "xl": 1200,
        "xs": 320,
      }
    }
    forwardRef={null}
    margingMixin={10}
    mixins={
      Object {
        "bgMixin": [Function],
        "margingMixin": [Function],
        "paddingMixin": [Function],
      }
    }
    paddingMixin={
      Object {
        "xl": Array [
          5,
          15,
        ],
      }
    }
    wrappedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bdVaJa",
          "isStatic": false,
          "lastClassName": "juxaEn",
          "rules": Array [
            "
  background: red;
  width: 100px;
  ",
            [Function],
            "
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bdVaJa",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
  >
    <ResponsiveProps
      bgMixin={
        Object {
          "s": "blue",
          "xl": "red",
          "xs": "green",
        }
      }
      breakpoints={
        Object {
          "l": 992,
          "m": 768,
          "s": 576,
          "xl": 1200,
          "xs": 320,
        }
      }
      forwardRef={null}
      margingMixin={10}
      mixins={
        Object {
          "bgMixin": [Function],
          "margingMixin": [Function],
          "paddingMixin": [Function],
        }
      }
      paddingMixin={
        Object {
          "xl": Array [
            5,
            15,
          ],
        }
      }
      theme={Object {}}
      wrappedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "juxaEn",
            "rules": Array [
              "
  background: red;
  width: 100px;
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
    >
      <.sc-bdVaJa
        breakpoints={
          Object {
            "l": 992,
            "m": 768,
            "s": 576,
            "xl": 1200,
            "xs": 320,
          }
        }
        forwardRef={null}
        mixins={
          Object {
            "bgMixin": [Function],
            "margingMixin": [Function],
            "paddingMixin": [Function],
          }
        }
        responsiveProps={
          Array [
            Array [
              "
      ",
              "@media only screen and (min-width: 320px)",
              "{
        ",
              "
          ",
              [Function],
              "
        ",
              "
      }
    ",
            ],
            Array [
              "
      ",
              "@media only screen and (min-width: 576px)",
              "{
        ",
              "
          ",
              [Function],
              "
        ",
              "
      }
    ",
            ],
            Array [
              "
      ",
              "@media only screen and (min-width: 1200px)",
              "{
        ",
              "
          ",
              [Function],
              [Function],
              "
        ",
              "
      }
    ",
            ],
            Array [
              "
        ",
              "
          ",
              [Function],
              "
        ",
              "
      ",
            ],
          ]
        }
        theme={Object {}}
        wrappedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bdVaJa",
              "isStatic": false,
              "lastClassName": "juxaEn",
              "rules": Array [
                "
  background: red;
  width: 100px;
  ",
                [Function],
                "
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bdVaJa",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
      >
        <StyledComponent
          breakpoints={
            Object {
              "l": 992,
              "m": 768,
              "s": 576,
              "xl": 1200,
              "xs": 320,
            }
          }
          forwardRef={null}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bdVaJa",
                "isStatic": false,
                "lastClassName": "juxaEn",
                "rules": Array [
                  "
  background: red;
  width: 100px;
  ",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bdVaJa",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          mixins={
            Object {
              "bgMixin": [Function],
              "margingMixin": [Function],
              "paddingMixin": [Function],
            }
          }
          responsiveProps={
            Array [
              Array [
                "
      ",
                "@media only screen and (min-width: 320px)",
                "{
        ",
                "
          ",
                [Function],
                "
        ",
                "
      }
    ",
              ],
              Array [
                "
      ",
                "@media only screen and (min-width: 576px)",
                "{
        ",
                "
          ",
                [Function],
                "
        ",
                "
      }
    ",
              ],
              Array [
                "
      ",
                "@media only screen and (min-width: 1200px)",
                "{
        ",
                "
          ",
                [Function],
                [Function],
                "
        ",
                "
      }
    ",
              ],
              Array [
                "
        ",
                "
          ",
                [Function],
                "
        ",
                "
      ",
              ],
            ]
          }
          theme={Object {}}
          wrappedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bdVaJa",
                "isStatic": false,
                "lastClassName": "juxaEn",
                "rules": Array [
                  "
  background: red;
  width: 100px;
  ",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bdVaJa",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
        >
          <div
            className="fkkouS"
          />
        </StyledComponent>
      </.sc-bdVaJa>
    </ResponsiveProps>
  </[object Object]>
</[object Object]>
`;

exports[`withResponsiveProps methods withTheme overrides the breakpoint utils provided by theme 1`] = `
Array [
  Array [
    100,
  ],
  Array [
    200,
  ],
  Array [
    300,
  ],
]
`;
